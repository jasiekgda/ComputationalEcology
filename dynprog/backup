# -*- coding: utf-8 -*-
"""
Created on Sun Oct 11 21:04:52 2015

@author: root
"""

class ValueIterationSolver:
    """

    This class defines the primitives representing the growth model.

    Parameters
    ----------
    f : function, optional(default=k**.65)
        The production function; the default is the Cobb-Douglas
        production function with power of .65
    beta : scalar(int), optional(default=.95)
        The utility discounting parameter
    u : function, optional(default=np.log)
        The utility function.  Default is log utility
    grid_max : scalar(int), optional(default=2)
        The maximum grid value
    grid_size : scalar(int), optional(default=150)
        The size of grid to use.

    Attributes
    ----------
    f, beta, u  : see Parameters
    grid : array_like(float, ndim=1)
        The grid over savings.

    """
    def __init__(self, f=lambda k: k**0.65, beta=0.95, u=np.log,
                 grid_max=2, grid_size=150):

        self.u, self.f, self.beta = u, f, beta
        self.grid = np.linspace(1e-6, grid_max, grid_size)

    def __repr__(self):
        m = "GrowthModel(beta={b}, grid_max={gm}, grid_size={gs})"
        return m.format(b=self.beta, gm=self.grid.max(), gs=self.grid.size)

    def __str__(self):
        m = """\
        GrowthModel:
          - beta (discount factor)                             : {b}
          - u (utility function)                               : {u}
          - f (production function)                            : {f}
          - grid bounds (bounds for grid over savings values)  : ({gl}, {gm})
          - grid points (number of points in grid for savings) : {gs}
        """
        return dedent(m.format(b=self.beta, u=self.u, f=self.f,
                               gl=self.grid.min(), gm=self.grid.max(),
                               gs=self.grid.size))

    def bellman_operator(self, w, compute_policy=False):
        """
        The approximate Bellman operator, which computes and returns the
        updated value function Tw on the grid points.

        Parameters
        ----------
        w : array_like(float, ndim=1)
            The value of the input function on different grid points
        compute_policy : Boolean, optional(default=False)
            Whether or not to compute policy function

        """
        # === Apply linear interpolation to w === #
        Aw = lambda x: interp(x, self.grid, w)

        if compute_policy:
            sigma = np.empty(len(w))

        # == set Tw[i] equal to max_c { u(c) + beta w(f(k_i) - c)} == #
        Tw = np.empty(len(w))
        for i, k in enumerate(self.grid):
            objective = lambda c: - self.u(c) - self.beta * Aw(self.f(k) - c)
            c_star = fminbound(objective, 1e-6, self.f(k))
            if compute_policy:
                # sigma[i] = argmax_c { u(c) + beta w(f(k_i) - c)}
                sigma[i] = c_star
            Tw[i] = - objective(c_star)

        if compute_policy:
            return Tw, sigma
        else:
            return Tw

    def compute_greedy(self, w):
        """
        Compute the w-greedy policy on the grid points.

        Parameters
        ----------
        w : array_like(float, ndim=1)
            The value of the input function on different grid points

        """
        Tw, sigma = self.bellman_operator(w, compute_policy=True)
        return sigma


class PlantStorageModel:

    '''
    states and control format
    st,w,a0,a1 = s[0],s[1],a[0],a[1]
    
    --- state ---
    st - storage in [0, 2]
    w - biomas in [0, 2]
    --- controls ---
    a0 - amount of energy taken from storage in [0, 1)]
    a1 - proportion of energy allocated in growth [0,1]
    
    V(s,w)
    utility_t = a0*(1-a1)
    
    g( s, w, a0, a1,e) : [s = (1-a0)(s+P(w)), w = e( w +a0*a1)]
    
    P(w): produkcja energii
    
    '''

    def __init__( self, P , beta = 0.95 ):        
        self.beta = beta
        
        def getIdx(grid_min = [0.0,0.0 ], grid_max = [2.0,2.0] , grid_size = [11,11]):        
            return map( lambda x: np.linspace(x[0],x[1],x[2]),zip(grid_min,grid_max,grid_size))
            
        
        def utility( s, a ):
            a0,a1 = a[0],a[1]
            return a0*(1.0-a1)
    
        def dUtility( s, a):
            a0,a1 = a[0],a[1]
            return np.array([1.0-a1,-a0],dtype =float)
    
    
        def g( s, a, e):        
            st,w,a0,a1 = s[0],s[1],a[0],a[1]
            return np.array([(st+P(w)-a0),
                             e*(w+a0*a1)])
                             
        def dG( s, a, e):            
            a0,a1 = a[0],a[1]
            return np.array([[-1,0],
                             [e*a1,e*a0]])
    
        def ua( s ):           
            st,w = s[0],s[1]
            return np.array([st+P(w),1],dtype = float)

        def la( s ):
            return np.array([0,0],dtype = float)    
            
        def init( idx ):
            interpolator = RegularGridInterpolator(((0,4),(0,4)),[[0,20],[20,40]])
            w = np.zeros( (len(idx[0]),len(idx[1])) , dtype = float)        
        
            it = np.nditer(w, flags=['multi_index'], op_flags=['readonly'])
            while not it.finished: 
                pos = map( lambda x, i : idx[i][x] , 
                          it.multi_index, 
                          xrange(len(it.multi_index)) )
                w.itemset(it.multi_index,interpolator(pos))
                it.iternext()
                
            return w      
        
        #def weigths( n = 3 , mu = 0 , sigma = 0.2 ):
        #    e, w = helpers.MathHelpers.GaussNoise(n , mu , sigma )
        #    return zip(e,w)
        
        self.getIdx = getIdx
        self.utility = utility
        self.dUtility = dUtility
        self.P = P
        self.g = g
        self.dG = dG
        self.ua = ua
        self.la = la
        self.init = init        
       
    def __repr__(self):
        return "%s(%r)" % (self.__class__, self.__dict__)
    
    def __str__(self):
        return "%s(%r)" % (self.__class__, self.__dict__)
        
    def ver(self):
        return 2
